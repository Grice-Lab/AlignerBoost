#### A demo reference-based NGS project using AlignerBoost for pre-processing, QC,
#### accurate mapping, and some post-alignment analysis such as
#### fast read classification and fast variation annotation
#### AlignerBoost generates executable bash scripts which can either be run directly,
#### or used in submission systems such as 'qsub' or 'bsub'   
### 1. Collect resources. Some examples ares:
# AlignerBoost latest executable: ./AlignerBoost.jar
# Bowtie index: hg19/bowtie/*.ebwt
# Bowtie2 index: hg19/bowtie2/*.bt2
# BWA index: hg19/bwa/*
# SOAP2 index: hg19/soap2/*
# novoalign index: hg19/novoalign/*
# STAR index: hg19/STAR/*
# Genome annotation: GENCODE.gff
# Chromosome size: hg19_chr_len.txt

### 2. Manually prepare experiment configuration file(s)
## Use the provided template in 'examples/AB_demo_experiment_design.conf' as the starting point
hg19_test_simulated_SE.conf

## Init lib summary
java -jar AlignerBoost.jar stats total hg19_test_simulated_SE.conf hg19_test_simulated_SE_stats.txt
      ||
      \/
# hg19_test_simulated_SE_stats.txt


### 3. QC check of read quality
java -jar AlignerBoost.jar prepare readQC hg19_test_simulated_SE.conf check_QC_SE.sh
./check_QC_SE.sh
      ||
      \/
# simulated_SE/*QC.txt


### 4. Trim the 3'-adapter sequences, if requested
## The (opposite end) adapter sequences are mostly likely to be present,
## if your expected insert DNA size is shorter than the NGS read length 
java -jar AlignerBoost.jar prepare trim hg19_test_simulated_SE.conf trim_SE.sh
./trim_SE.sh
      ||
      \/
# (no trimming requested)
# Add trimmed read summary
java -jar AlignerBoost.jar stats trimmed hg19_test_simulated_SE.conf hg19_test_simulated_SE_stats.txt
      ||
      \/
# hg19_test_simulated_SE_stats.txt


### 5. Get NR-seq from raw trimmed/untrimmed reads, if requested
java -jar AlignerBoost.jar prepare NR hg19_test_simulated_SE.conf get_NR_SE.sh
./get_NR_SE.sh
      ||
      \/
# (no NR requested)
# Add NR-tag summary
java -jar AlignerBoost.jar stats NR hg19_test_simulated_SE.conf hg19_test_simulated_SE_stats.txt
      ||
      \/
# hg19_test_simulated_SE_stats.txt


### 6. Map read to genome
java -jar AlignerBoost.jar prepare align hg19_test_simulated_SE.conf map_SE.sh
./map_SE.sh
      ||
      \/
# work/*_hg19_raw.bam


### 7. Filter alignments
java -jar AlignerBoost.jar prepare filter hg19_test_simulated_SE.conf filter_SE.sh
./filter_SE.sh
      ||
      \/
# hg19_*filtered.bam

# Add mapped read summary
java -jar AlignerBoost.jar stats mapped hg19_test_simulated_SE.conf hg19_test_simulated_SE_stats.txt
      ||
      \/
# hg19_test_simulated_SE_stats.txt


### 8. Example usage of AlignerBoost utility tools; try 'java -jar AlignerBoost (-h|--help)' for details
## 1. Fast genetic-type classification of mapped reads
java -Xms12G -jar AlignerBoost.jar utils classifySAM \
-gff GENCODE.gff -gff refGene.gff\
-i hg19_mysample.bam -o mysample_read_gtype.txt -v

## 2. Fast genetic-type classification of arbitrary genomic regions
java -Xms12G -jar AlignerBoost.jar utils classifyBED \
-g hg19_chr_len.txt -gff GENCODE.gff \
-i my_region.bed -o my_region_gtype.bed -v

## 3. Fast genetic-type classification of variations in VCF files
java -Xms12G -jar AlignerBoost.jar utils classifyVCF \
-g hg19/hg19_chr_len.txt -d GATK_bundle/ucsc.hg19.dict \
-gff hg19/refGene.gff -gff hg19/wgRna.gff -gff hg19/hsa_mirna.gff -gff hg19/vegaPseudoGene.gff -gff hg19/rmsk.gff \
-i my_snv.vcf -o my_snv_type.vcf -v
   